import React, { useState } from 'react';
import { ethers } from 'ethers';

// ERC20 ABI and Bytecode
const ERC20_ABI = [
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "symbol",
				"type": "string"
			},
			{
				"internalType": "uint8",
				"name": "decimalsValue",
				"type": "uint8"
			},
			{
				"internalType": "uint256",
				"name": "initialSupply",
				"type": "uint256"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "spender",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "allowance",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "needed",
				"type": "uint256"
			}
		],
		"name": "ERC20InsufficientAllowance",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "sender",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "balance",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "needed",
				"type": "uint256"
			}
		],
		"name": "ERC20InsufficientBalance",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "approver",
				"type": "address"
			}
		],
		"name": "ERC20InvalidApprover",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "receiver",
				"type": "address"
			}
		],
		"name": "ERC20InvalidReceiver",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "sender",
				"type": "address"
			}
		],
		"name": "ERC20InvalidSender",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "spender",
				"type": "address"
			}
		],
		"name": "ERC20InvalidSpender",
		"type": "error"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "spender",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "Approval",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "Transfer",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "spender",
				"type": "address"
			}
		],
		"name": "allowance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "spender",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "approve",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "account",
				"type": "address"
			}
		],
		"name": "balanceOf",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "decimals",
		"outputs": [
			{
				"internalType": "uint8",
				"name": "",
				"type": "uint8"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "name",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "symbol",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "totalSupply",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "transfer",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "transferFrom",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	}
];

const ERC20_BYTECODE = "608060405234801561000f575f80fd5b5060405161192c38038061192c833981810160405281019061003191906104f3565b838381600390816100429190610793565b5080600490816100529190610793565b5050508160055f6101000a81548160ff021916908360ff1602179055506100963383600a61008091906109be565b8361008b9190610a08565b61009f60201b60201c565b50505050610b31565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361010f575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016101069190610a88565b60405180910390fd5b6101205f838361012460201b60201c565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610174578060025f8282546101689190610aa1565b92505081905550610242565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050818110156101fd578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016101f493929190610ae3565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610289578060025f82825403925050819055506102d3565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516103309190610b18565b60405180910390a3505050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61039c82610356565b810181811067ffffffffffffffff821117156103bb576103ba610366565b5b80604052505050565b5f6103cd61033d565b90506103d98282610393565b919050565b5f67ffffffffffffffff8211156103f8576103f7610366565b5b61040182610356565b9050602081019050919050565b8281835e5f83830152505050565b5f61042e610429846103de565b6103c4565b90508281526020810184848401111561044a57610449610352565b5b61045584828561040e565b509392505050565b5f82601f8301126104715761047061034e565b5b815161048184826020860161041c565b91505092915050565b5f60ff82169050919050565b61049f8161048a565b81146104a9575f80fd5b50565b5f815190506104ba81610496565b92915050565b5f819050919050565b6104d2816104c0565b81146104dc575f80fd5b50565b5f815190506104ed816104c9565b92915050565b5f805f806080858703121561050b5761050a610346565b5b5f85015167ffffffffffffffff8111156105285761052761034a565b5b6105348782880161045d565b945050602085015167ffffffffffffffff8111156105555761055461034a565b5b6105618782880161045d565b9350506040610572878288016104ac565b9250506060610583878288016104df565b91505092959194509250565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806105dd57607f821691505b6020821081036105f0576105ef610599565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026106527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610617565b61065c8683610617565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61069761069261068d846104c0565b610674565b6104c0565b9050919050565b5f819050919050565b6106b08361067d565b6106c46106bc8261069e565b848454610623565b825550505050565b5f90565b6106d86106cc565b6106e38184846106a7565b505050565b5b81811015610706576106fb5f826106d0565b6001810190506106e9565b5050565b601f82111561074b5761071c816105f6565b61072584610608565b81016020851015610734578190505b61074861074085610608565b8301826106e8565b50505b505050565b5f82821c905092915050565b5f61076b5f1984600802610750565b1980831691505092915050565b5f610783838361075c565b9150826002028217905092915050565b61079c8261058f565b67ffffffffffffffff8111156107b5576107b4610366565b5b6107bf82546105c6565b6107ca82828561070a565b5f60209050601f8311600181146107fb575f84156107e9578287015190505b6107f38582610778565b86555061085a565b601f198416610809866105f6565b5f5b828110156108305784890151825560018201915060208501945060208101905061080b565b8683101561084d5784890151610849601f89168261075c565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f8160011c9050919050565b5f808291508390505b60018511156108e4578086048111156108c0576108bf610862565b5b60018516156108cf5780820291505b80810290506108dd8561088f565b94506108a4565b94509492505050565b5f826108fc57600190506109b7565b81610909575f90506109b7565b816001811461091f576002811461092957610958565b60019150506109b7565b60ff84111561093b5761093a610862565b5b8360020a91508482111561095257610951610862565b5b506109b7565b5060208310610133831016604e8410600b841016171561098d5782820a90508381111561098857610987610862565b5b6109b7565b61099a848484600161089b565b925090508184048111156109b1576109b0610862565b5b81810290505b9392505050565b5f6109c8826104c0565b91506109d38361048a565b9250610a007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846108ed565b905092915050565b5f610a12826104c0565b9150610a1d836104c0565b9250828202610a2b816104c0565b91508282048414831517610a4257610a41610862565b5b5092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610a7282610a49565b9050919050565b610a8281610a68565b82525050565b5f602082019050610a9b5f830184610a79565b92915050565b5f610aab826104c0565b9150610ab6836104c0565b9250828201905080821115610ace57610acd610862565b5b92915050565b610add816104c0565b82525050565b5f606082019050610af65f830186610a79565b610b036020830185610ad4565b610b106040830184610ad4565b949350505050565b5f602082019050610b2b5f830184610ad4565b92915050565b610dee80610b3e5f395ff3fe608060405234801561000f575f80fd5b5060043610610091575f3560e01c8063313ce56711610064578063313ce5671461013157806370a082311461014f57806395d89b411461017f578063a9059cbb1461019d578063dd62ed3e146101cd57610091565b806306fdde0314610095578063095ea7b3146100b357806318160ddd146100e357806323b872dd14610101575b5f80fd5b61009d6101fd565b6040516100aa9190610a67565b60405180910390f35b6100cd60048036038101906100c89190610b18565b61028d565b6040516100da9190610b70565b60405180910390f35b6100eb6102af565b6040516100f89190610b98565b60405180910390f35b61011b60048036038101906101169190610bb1565b6102b8565b6040516101289190610b70565b60405180910390f35b6101396102e6565b6040516101469190610c1c565b60405180910390f35b61016960048036038101906101649190610c35565b6102fb565b6040516101769190610b98565b60405180910390f35b610187610340565b6040516101949190610a67565b60405180910390f35b6101b760048036038101906101b29190610b18565b6103d0565b6040516101c49190610b70565b60405180910390f35b6101e760048036038101906101e29190610c60565b6103f2565b6040516101f49190610b98565b60405180910390f35b60606003805461020c90610ccb565b80601f016020809104026020016040519081016040528092919081815260200182805461023890610ccb565b80156102835780601f1061025a57610100808354040283529160200191610283565b820191905f5260205f20905b81548152906001019060200180831161026657829003601f168201915b5050505050905090565b5f80610297610474565b90506102a481858561047b565b600191505092915050565b5f600254905090565b5f806102c2610474565b90506102cf85828561048d565b6102da85858561051f565b60019150509392505050565b5f60055f9054906101000a900460ff16905090565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b60606004805461034f90610ccb565b80601f016020809104026020016040519081016040528092919081815260200182805461037b90610ccb565b80156103c65780601f1061039d576101008083540402835291602001916103c6565b820191905f5260205f20905b8154815290600101906020018083116103a957829003601f168201915b5050505050905090565b5f806103da610474565b90506103e781858561051f565b600191505092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f33905090565b610488838383600161060f565b505050565b5f61049884846103f2565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610519578181101561050a578281836040517ffb8f41b200000000000000000000000000000000000000000000000000000000815260040161050193929190610d0a565b60405180910390fd5b61051884848484035f61060f565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361058f575f6040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016105869190610d3f565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105ff575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016105f69190610d3f565b60405180910390fd5b61060a8383836107de565b505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361067f575f6040517fe602df050000000000000000000000000000000000000000000000000000000081526004016106769190610d3f565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106ef575f6040517f94280d620000000000000000000000000000000000000000000000000000000081526004016106e69190610d3f565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555080156107d8578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516107cf9190610b98565b60405180910390a35b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361082e578060025f8282546108229190610d85565b925050819055506108fc565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050818110156108b7578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016108ae93929190610d0a565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610943578060025f828254039250508190555061098d565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516109ea9190610b98565b60405180910390a3505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610a39826109f7565b610a438185610a01565b9350610a53818560208601610a11565b610a5c81610a1f565b840191505092915050565b5f6020820190508181035f830152610a7f8184610a2f565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610ab482610a8b565b9050919050565b610ac481610aaa565b8114610ace575f80fd5b50565b5f81359050610adf81610abb565b92915050565b5f819050919050565b610af781610ae5565b8114610b01575f80fd5b50565b5f81359050610b1281610aee565b92915050565b5f8060408385031215610b2e57610b2d610a87565b5b5f610b3b85828601610ad1565b9250506020610b4c85828601610b04565b9150509250929050565b5f8115159050919050565b610b6a81610b56565b82525050565b5f602082019050610b835f830184610b61565b92915050565b610b9281610ae5565b82525050565b5f602082019050610bab5f830184610b89565b92915050565b5f805f60608486031215610bc857610bc7610a87565b5b5f610bd586828701610ad1565b9350506020610be686828701610ad1565b9250506040610bf786828701610b04565b9150509250925092565b5f60ff82169050919050565b610c1681610c01565b82525050565b5f602082019050610c2f5f830184610c0d565b92915050565b5f60208284031215610c4a57610c49610a87565b5b5f610c5784828501610ad1565b91505092915050565b5f8060408385031215610c7657610c75610a87565b5b5f610c8385828601610ad1565b9250506020610c9485828601610ad1565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610ce257607f821691505b602082108103610cf557610cf4610c9e565b5b50919050565b610d0481610aaa565b82525050565b5f606082019050610d1d5f830186610cfb565b610d2a6020830185610b89565b610d376040830184610b89565b949350505050565b5f602082019050610d525f830184610cfb565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610d8f82610ae5565b9150610d9a83610ae5565b9250828201905080821115610db257610db1610d58565b5b9291505056fea2646970667358221220f7d02e6e5c8b26f31f14b27e65911383b52bf54a45bbbc136193a25366bcae6164736f6c634300081a0033";

function TokenCreator({ provider }) {
  const [name, setName] = useState('');
  const [symbol, setSymbol] = useState('');
  const [decimals, setDecimals] = useState(18);
  const [supply, setSupply] = useState('');
  const [deployedAddress, setDeployedAddress] = useState('');

  const deployToken = async () => {
    try {
      const signer = await provider.getSigner();
      const factory = new ethers.ContractFactory(ERC20_ABI, ERC20_BYTECODE, signer);
      const token = await factory.deploy(name, symbol, decimals, supply);
      await token.waitForDeployment();
      setDeployedAddress(await token.getAddress());
    } catch (error) {
        console.error("Error deploying token:", error);
    }
  };

  return (
    <div>
      <h2>Create ERC-20 Token</h2>
      <input
        type="text"
        placeholder="Token Name"
        value={name}
        onChange={(e) => setName(e.target.value)}
      />
      <input
        type="text"
        placeholder="Token Symbol"
        value={symbol}
        onChange={(e) => setSymbol(e.target.value)}
      />
      <input
        type="number"
        placeholder="Token Decimals"
        value={decimals}
        onChange={(e) => setDecimals(parseInt(e.target.value))}
      />
      <input
        type="text"
        placeholder="Total Supply"
        value={supply}
        onChange={(e) => setSupply(e.target.value)}
      />
      <button onClick={deployToken}>Create Token</button>
      {deployedAddress && (
        <p>Token deployed at: {deployedAddress}</p>
      )}
    </div>
  );
}

export default TokenCreator;